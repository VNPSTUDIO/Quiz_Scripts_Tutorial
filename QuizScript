//Это бесплатная версия скрипта, возможно, будет создан проект викторины с удобным интерфейсом!
using System.Collections.Generic;
using System.Collections;
using System;
using UnityEngine;
using UnityEngine.UI;

public class QuizScript : MonoBehaviour
{
	public Question[] Questions;
	public Text[] AnswersText;
	public GameObject QuitGame;
	public Text QuestionText;
	public Text ScoreText;
	public int Score;
	public int ScoreToAdd;
	public int WaitTime;
	public Text TimeText;
	int CopyWaitTime;
	private bool QuizLaunched = false;
	private UserSave US = new UserSave();

	int RandomQuestion;

	Question CurrentQuestion;

	List<object> QuestionList;

	public void Play() 
	{
		QuestionList = new List<object>(Questions);
		GameObject.FindGameObjectWithTag("QuizPanel").GetComponent<Animation>().Play("Begin_Quiz");
		CopyWaitTime = WaitTime;
		Generate();
	}
	public void LaunchTime() 
	{
		QuizLaunched = true;
		StartCoroutine(MakeTimeSmaller());
	}
	public void EndGame()
	{
		QuizLaunched = false;
		StopCoroutine(MakeTimeSmaller());
	}
	IEnumerator MakeTimeSmaller() 
	{
		while (WaitTime != 0) 
		{
			yield return new WaitForSeconds(1);
			WaitTime -= 1;
		}
	}
	private void Update()
	{
		ScoreText.text = "Ваш рекорд:" + Score;
		TimeText.text = WaitTime.ToString();
		if (WaitTime == 0) 
		{
			GameObject.FindGameObjectWithTag("QuizPanel").GetComponent<Animation>().Play("End_Quiz");
		}
		if (QuizLaunched)
		{
			StopCoroutine(MakeTimeSmaller());
			if (Input.GetKeyDown(KeyCode.Escape))
			{
				if (QuitGame.activeSelf)
				{
					QuitGame.SetActive(false);
				}
				else QuitGame.SetActive(true);
			}
		}
		else
		{
			if (Input.GetKeyDown(KeyCode.Escape))
			{
				if (QuitGame.activeSelf)
				{
					QuitGame.SetActive(false);
				}
				else QuitGame.SetActive(true);
			}
		}
	}
	public void Quit(int Index)
	{
		if (Index == 0)
		{
			Application.Quit();
		}
		else QuitGame.SetActive(false);
	}
	private void Awake() 
	{
		if (PlayerPrefs.HasKey("Save")) 
		{
			US = JsonUtility.FromJson<UserSave>(PlayerPrefs.GetString("Save"));
			Score = US.Score;
		}
	}
	private void OnApplicationQuit() 
	{
		US.Score = Score;
		PlayerPrefs.SetString("Save", JsonUtility.ToJson(US));
	}
	void Generate()
	{
		if (QuestionList.Count > 0) 
		{
			WaitTime = CopyWaitTime;
			RandomQuestion = UnityEngine.Random.Range(0, QuestionList.Count);
			CurrentQuestion = QuestionList[(RandomQuestion)] as Question;
			QuestionText.text = CurrentQuestion.question;
			List<string> Answers = new List<string>(CurrentQuestion.Answers);
			for (int i = 0; i < CurrentQuestion.Answers.Length; i++)
			{
				int RandomAnswer = UnityEngine.Random.Range(0, Answers.Count);
				AnswersText[i].text = Answers[RandomAnswer];
				Answers.RemoveAt(RandomAnswer);
			}
		}
		else
		{
			Debug.Log("Вы ответили на все вопросы!");
			GameObject.FindGameObjectWithTag("QuizPanel").GetComponent<Animation>().Play("End_Quiz");
		}
	}
	public void GiveAnswer(int Index) 
	{
		if (AnswersText[Index].text.ToString() == CurrentQuestion.Answers[0])
		{
			Debug.Log("Правильно!");
			Score += ScoreToAdd;
			QuestionList.RemoveAt(RandomQuestion);
			Generate();
		}
		else
		{
			Debug.Log("Вы ответили неправильно и игра завершена!");
			GameObject.FindGameObjectWithTag("QuizPanel").GetComponent<Animation>().Play("End_Quiz");
		}
	}
	[Serializable]
	public class Question
	{
		public string question;
		public string[] Answers = new string[3];
	}
	[Serializable]
	public class UserSave 
	{
		public int Score;
	}
}
